In order to use it one should use an rpm-based distro, like Fedora,
and should ensure the following packages are installed:

* git
* createrepo
* rpm-build
* rpm-sign (if signing of build packages is enabled)
* rpmdevtools
* make 

Unusually one can install those packages by just issuing:

    $ sudo yum install git createrepo rpm-build make 

The build system creates build environments in chroots and so no other
packages are needed on the host. All files created by the build system
are contained within the qubes-builder directory. The full build
requires some 25GB of free space, so keep that in mind when deciding
where to place this directory.

The build system is configured via builder.conf file -- one should
copy the attached builder.conf.template, and modify it as needed,
e.g.:

    cp builder.conf.default builder.conf 
    # edit the builder.conf file and set the following variables: 
    # GIT_PREFIX="marmarek/qubes-" 
    # NO_SIGN="1"

One additional useful requirement is that 'sudo root' work without any
prompt, which is default on most distros (e.g. 'sudo bash' brings you
the root shell without asking for any password). This is important as
the builder needs to switch to root and then back to user several
times during the build process (mainly to preform chroot). But do not call make
directly as root.

Additionally, if building with signing enabled (so NO\_SIGN is not
set), one must adjust `~/.rpmmacro` file so that it point to the GPG key
used for package signing, e.g.:

    %\_signature gpg
    %\_gpg\_path /home/user/.gnupg
    %\_gpg\_name AC1BF9B3  # <-- Key ID used for signing

It is also recommended to use an empty passphrase for the private key
used for signing. Contrary to a popular belief, this doesn't affect
your key or sources security -- if somebody compromised your system,
then the game is over, whether you use additional passphrase for the
key or not.

To build all Qubes packages one would do:

    $ make qubes 

... and then to build the ISO:

    $ make iso 

And this should produce a shiny new ISO.

One can also build selected component separately. E.g. to compile only
gui virtualization agent/daemon:

$ make gui-daemon


Building template using Disposable VM
=====================================

Qubes builder do support building the whole template (including all the VM
components) in DispVM. This has two advantages:
1. You start with clean environment, so the build process do not depend on any
   local (potentially uncommited) changes.
2. You do not need to trust all the build scripts, including postinstallation
   scripts of installed packages, configuration scripts etc.  Note: while you
   do not need to trust those scripts during build process, this doesn't apply
   to the result package itself - if the template is compromised during build
   process, all the VMs based on this template will be compromised too. But
   only that VMs.

To use this feature you'll need to install a few Qubes RPC services:
1. In dom0:
  * qubesbuilder.ExportDisk
  * qubesbuilder.AttachDisk
2. In your VM (from where you start the build process);
  * qubesbuilder.CopyTemplateBack
And respective policies for them.
RPC services file are in `rpc-services` subdirectory, to install them - copy
those files to `/etc/qubes-rpc` (in dom0 for first two services, in VM for the
third one). There are also example policies to be placed in
`/etc/qubes-rpc/policy` (in dom0, for all the services) - you need to update your
devel VM name in qubesbuilder.ExportDisk and qubesbuilder.CopyTemplateBack
policy.

When you've done, you probably want to adjust some builder.conf settings. You have two options:
1. You can use the same `builder.conf` for building the template in DispVM. In
   this case you don't need to do anything.
2. You can use separate `builder.conf`, even different one for every template
   type. The `builder.conf` file can be provided using *BUILDER\_TEMPLATE\_CONF*
   setting. That variable contains space-separated list of *<dist>:<location>*
   pairs, where *<dist>* is code name of template (like `fc20`, or
   `wheezy+whonix-workstation`), and *<location>* is path to the config
   file. Alternatively you can, instead of plain path, provide git repo
   location, which contains `config/builder.conf` file. In this case *<location>*
   consists of three parameters:
   - *GIT\_URL* - full URL to some git repo
   - *BRANCH* - branch name
   - *KEY* - path to local file with key(s) to verify a tag on that repo
    Those three parameters should be separated by comas. Example:
        BUILDER_TEMPLATE_CONF = fc20+minimal:https://github.com/username/reponame,master,/home/user/keys/username.asc

That `builder.conf` should contain all the settings needed to build the template
itself. As the file will be copied alone, it should be self-contained at least
for the first *get-sources* stage (to download builder and its plugins). Then
it can include other files from builder builder plugins, if needed.

Your **original** `builder.conf` should contain settings how to package
the template, especially how it should be named (TEMPLATE\_LABEL option).

Then you can start the build process. To build all selected templates
(according to *DISTS\_VM* setting) - each in new DispVM:
    $ make template-in-dispvm
Or alternatively you can build just selected one by appending its code name:
    $ make template-in-dispvm-fc21

Details on building template in Disposable VM
---------------------------------------------
When you execute *make template-in-dispvm* it call script `scripts/build_full_template_in_dispvm`, which:
1. Create an empty disk image.
2. Mount it, copy qubes-builder there, including provided config or key to
   verify git tag.
3. Unmount that image.
4. Generate random key, associate the disk image with it
   (qubesbuilder.ExportDisk service).
5. Launch new DispVM using qubes.VMShell service, pass there a script and a key
   generated in previous step.
6. Inside the DispVM mount exported disk image (qubesbuilder.AttachDisk
   service), optionally clone repo to extract config file (of course verify git
   tag before accessing any file there).
7. Still inside DispVM, download sources according to `builder.conf` (that one
   pointed by *BUILDER\_TEMPLATE\_CONF* setting). First *builder* component is
   downloaded to possibly load some builder extensions.
8. When all the sources are downloaded, start the build process calling *make qubes-vm template*.
9. The last step is to transfer just built `root.img` and default lists of
   appmenus back to original VM (qubesbuilder.CopyTemplateBack service). This
   process uses the same key as in step 4 to authorize the transfer.
10. At this stage DispVM is destroyed, including disk image created in the first step.
11. The last step is to create rpm package to carry `root.img` and appmenus
    list. It is important to note that it doesn't parse `root.img` in any way,
    just make an archive with it.

