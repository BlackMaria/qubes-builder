#!/bin/sh

# This is script to automate build process in reaction to pushing updates
# sources to git. The workflow is:
# - fetch sources, check if properly signed
# - check if version tag is on top
# - fast-forward local repository
# - build package(s) according to builder.conf
# - upload to current-testing repository
#
# All the above should be properly logged

usage() {
    echo "Usage: $0 component-name" >&2
}

build_failure() {
    component=$1
    package_set=$2
    dist=$3

    GITHUB_API_KEY=$(make -s get-var GET_VAR=GITHUB_API_KEY)
    GITHUB_BUILD_ISSUES_REPO=$(make -s get-var GET_VAR=GITHUB_BUILD_ISSUES_REPO)
    echo "Build failed: $component for $package_set ($dist)" >&2
    if [ -z "$GITHUB_API_KEY" -o -z "$GITHUB_BUILD_ISSUES_REPO" ]; then
        echo "No alternative way of build failure reporting (GITHUB_API_KEY, GITHUB_BUILD_ISSUES_REPO), exiting" >&2
        exit 1
    fi
    curl -H "Authorization: token $GITHUB_API_KEY" \
		-d "{ \"title\": \"Build failed: $component for $package_set ($dist)\",
              \"body\": \"See https://github.com/QubesOS/build-logs/tree/master/$(hostname) for details\" }" \
        https://api.github.com/repos/$GITHUB_BUILD_ISSUES_REPO/issues
}

if [ -z "$1" ]; then
    usage
    exit 1
fi

set -e

cd $(dirname $0)/..

# Sanity checks
if [ "${1##*/}" != "${1}" ]; then
    echo "Found '/' in argument" >&2
    exit 1
fi

if [ ! -d qubes-src/$1 ]; then
    echo "No such component: $1" >&2
    exit 1
fi

component=$1
export COMPONENTS=$component

# enable logging (use qrexec policy to redirect to the right VM)
export QUBES_BUILD_LOG_CMD="qrexec-client-vm 'dom0' qubesbuilder.BuildLog"

# fetch sources and verify signed tags
make GIT_MERGE_OPTS=--ff-only prepare-merge do-merge get-sources-extra

dists_vm=$(make -s get-var GET_VAR=DISTS_VM)
dist_dom0=$(make -s get-var GET_VAR=DIST_DOM0)
built_for_dom0=
built_for_vm=
if [ -n "$dist_dom0" ]; then
    release_status=$(scripts/check-release-status-for-component \
            --abort-no-version \
            --abort-on-empty \
            --no-print-version \
            $component dom0 $dist_dom0 || :)
    if [ "$release_status" == "not released" ]; then
        if scripts/make-with-log \
                DISTS_VM= DIST_DOM0=$dist_dom0 qubes; then
            built_for_dom0=$dist_dom0
        else
            # report failure but still upload other packages
            build_failure $component dom0 $dist_dom0
        fi
    fi
fi

if [ -n "$dists_vm" ]; then
    for dist_vm in $dists_vm; do
        release_status=$(scripts/check-release-status-for-component \
                --abort-no-version \
                --abort-on-empty \
                --no-print-version \
                $component vm $dist_vm || :)
        if [ "$release_status" == "not released" ]; then
            if scripts/make-with-log \
                    DISTS_VM=$dist_vm DIST_DOM0= qubes; then
                built_for_vm="$built_for_vm $dist_vm"
            else
                # report failure but still upload other packages
                build_failure $component vm $dist_dom0
            fi
        fi
    done
fi

# sending a log should allow accessing signing keys
make \
    DISTS_VM="$built_for_vm" \
    DIST_DOM0="$built_for_dom0" \
    sign-all update-repo-current-testing

